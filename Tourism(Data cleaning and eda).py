# -*- coding: utf-8 -*-
"""DPL_Toursim(Missing values).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_3BkUPT-BzCMjqjRwwkBQ7ShKfj1rwao
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import KNNImputer

"""#### *We had Duplicate Name of columns(i.e. yearly Wise visitors,Quarter Wise Visitors) and pandas was reading it as yearly wise visitors.1,yearly wise visitors.2 but as we want duplicate names for hiearchial indexing so we have done this procedure.*"""

index=[x for x in range(183)]

df=pd.read_csv("/content/Final Numeric Dataset.csv",names=index)

df

"""So lets find number of missing values in the dataset"""

df.isna().sum().sum()

round(df.isnull().sum() / df.shape[0] * 100.00,2)

"""The columns in which missing are greater than 10 %"""

null_previousDF = pd.DataFrame((df.isnull().sum())*100/df.shape[0]).reset_index()
null_previousDF.columns = ['Column Name', 'Null Values Percentage']
fig = plt.figure(figsize=(18,6))
ax = sns.pointplot(x="Column Name",y="Null Values Percentage",data=null_previousDF,color ='blue')
plt.xticks(rotation =90,fontsize =7)
ax.axhline(10, ls='--',color='red')
plt.title("Percentage of Missing values in dataset")
plt.ylabel("Null Values PERCENTAGE")
plt.xlabel("COLUMNS")
plt.show()

df.info()

df.notnull().sum().sum()

print(df.columns)

"""We need to work on Numeric Data to so removing First String"""

df1 = df.iloc[1:]
df1.head(5)

imputer = KNNImputer(n_neighbors=3)

"""Transposing the Dataset So that Each Country Becomes One Column"""

transpose_df=df.transpose()

transpose_df.head()

"""Finding All the Missing Values"""

transpose_df.isna().sum().sum()

transpose_df[0]=transpose_df[0].replace(np.NaN,'Type')

transpose_df

transpose_df.info()

col_name = [
    "type", "Year", "Canada", "U.S.A", "Argentina", "Brazil", "Mexico", "Austria", "Belgium", "Denmark",
    "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Netherlands", "Norway", "Portugal", "Spain",
    "Sweden", "Switzerland", "U.K.", "Czech Rep.", "Hungary", "Kazakhstan", "Poland", "Russian Fed", "Ukraine",
    "Egypt", "Kenya", "Mauritius", "Nigeria", "South Africa", "Sudan", "Tanzania", "Bahrain", "Iraq", "Israel",
    "Oman", "Saudi Arabia", "Turkey", "U.A.E.", "Yemen Arab Rep.", "Afghanistan", "Bangladesh", "Bhutan", "Iran",
    "Maldives", "Nepal", "Pakistan", "Sri Lanka", "Indonesia", "Malaysia", "Myanmar", "Philippines", "Singapore",
    "Thailand", "Vietnam", "China", "Japan", "Rep. of Korea", "Taiwan", "Australia", "New Zealand"
]

new_col = [
    "2014", "2015", "2016", "2017", "2018", "2019", "2020",
    "2014 1st quarter (Jan-March)", "2014 2nd quarter (Apr-June)", "2014 3rd quarter (July-Sep)",
    "2014 4th quarter (Oct-Dec))", "2015 1st quarter (Jan-March)", "2015 2nd quarter (Apr-June)",
    "2015 3rd quarter (July-Sep)", "2015 4th quarter (Oct-Dec)", "2016 1st quarter (Jan-March)",
    "2016 2nd quarter (Apr-June)", "2016 3rd quarter (July-Sep)", "2016 4th quarter (Oct-Dec)",
    "2017 1st quarter (Jan-March)", "2017 2nd quarter (Apr-June)", "2017 3rd quarter (July-Sep)",
    "2017 4th quarter (Oct-Dec)", "2018 1st quarter (Jan-March)", "2018 2nd quarter (Apr-June)",
    "2018 3rd quarter (July-Sep)", "2018 4th quarter (Oct-Dec)", "2019 1st quarter (Jan-March)",
    "2019 2nd quarter (Apr-June)", "2019 3rd quarter (July-Sep)", "2019 4th quarter (Oct-Dec)",
    "2020 1st quarter (Jan-March)", "2020 2nd quarter (Apr-June)", "2020 3rd quarter (July-Sep)",
    "2020 4th quarter (Oct-Dec)", "2014 0-14", "2014 15-24", "2014 25-34", "2014 35-44", "2014 45-54",
    "2014 55-64", "2014 65 AND ABOVE", "2015 0-14", "2015 15-24", "2015 25-34", "2015 35-44", "2015 45-54",
    "2015 55-64", "2015 65 AND ABOVE", "2016 0-14", "2016 15-24", "2016 25-34", "2016 35-44", "2016 45-54",
    "2016 55-64", "2016 65 AND ABOVE", "2017 0-14", "2017 15-24", "2017 25-34", "2017 35-44", "2017 45-54",
    "2017 55-64", "2017 65 AND ABOVE", "2018 0-14", "2018 15-24", "2018 25-34", "2018 35-44", "2018 45-54",
    "2018 55-64", "2018 65 AND ABOVE", "2019 0-14", "2019 15-24", "2019 25-34", "2019 35-44", "2019 45-54",
    "2019 55-64", "2019 65 AND ABOVE", "2020 0-14", "2020 15-24", "2020 25-34", "2020 35-44", "2020 45-54",
    "2020 55-64", "2020 65 AND ABOVE", "2014 Delhi (Airport)", "2014 Mumbai (Airport)", "2014 Chennai (Airport)",
    "2014 Calicut (Airport)", "2014 Benguluru (Airport)", "2014 Kolkata (Airport)", "2014 Hyderabad (Airport)",
    "2014 Cochin (Airport)", "2015 Delhi (Airport)", "2015 Mumbai (Airport)", "2015 Chennai (Airport)",
    "2015 Calicut (Airport)", "2015 Benguluru (Airport)", "2015 Kolkata (Airport)", "2015 Hyderabad (Airport)",
    "2015 Cochin (Airport)", "2016 Delhi (Airport)", "2016 Mumbai (Airport)", "2016 Chennai (Airport)",
    "2016 Calicut (Airport)", "2016 Benguluru (Airport)", "2016 Kolkata (Airport)", "2016 Hyderabad (Airport)",
    "2016 Cochin (Airport)", "2017 Delhi (Airport)", "2017 Mumbai (Airport)", "2017 Chennai (Airport)",
    "2017 Calicut (Airport)", "2017 Benguluru (Airport)", "2017 Kolkata (Airport)", "2017 Hyderabad (Airport)",
    "2017 Cochin (Airport)", "2018 Delhi (Airport)", "2018 Mumbai (Airport)", "2018 Chennai (Airport)",
    "2018 Calicut (Airport)", "2018 Benguluru (Airport)", "2018 Kolkata (Airport)", "2018 Hyderabad (Airport)",
    "2018 Cochin (Airport)", "2019 Delhi (Airport)", "2019 Mumbai (Airport)", "2019 Chennai (Airport)",
    "2019 Calicut (Airport)", "2019 Benguluru (Airport)", "2019 Kolkata (Airport)", "2019 Hyderabad (Airport)",
    "2019 Cochin (Airport)", "2020 Delhi (Airport)", "2020 Mumbai (Airport)", "2020 Chennai (Airport)",
    "2020 Calicut (Airport)", "2020 Benguluru (Airport)", "2020 Kolkata (Airport)", "2020 Hyderabad (Airport)",
    "2020 Cochin (Airport)", "2014 Male", "2014 Female", "2015 Male", "2015 Female", "2016 Male", "2016 Female",
    "2017 Male", "2017 Female", "2018 Male", "2018 Female", "2019 Male", "2019 Female", "2020 Male", "2020 Female",
    "2014 AIR", "2014 SEA", "2014 RAIL", "2014 LAND", "2015 AIR", "2015 SEA", "2015 RAIL", "2015 LAND", "2016 AIR",
    "2016 SEA", "2016 RAIL", "2016 LAND", "2017 AIR", "2017 SEA", "2017 RAIL", "2017 LAND", "2018 AIR", "2018 SEA",
    "2018 RAIL", "2018 LAND", "2019 AIR", "2019 SEA", "2019 RAIL", "2019 LAND", "2020 AIR", "2020 SEA", "2020 RAIL",
    "2020 LAND"
]

dic={}
for i in range(65):
  dic[i]=col_name[i]

transpose_df.rename(columns=dic, inplace=True)

transpose_df

print(transpose_df.columns)

transpose_df=transpose_df[1:]

transpose_df

transpose_df.isna().sum().sum()

df1=transpose_df.set_index(['type','Year'])

df1

col_to_impute = [
    "Canada", "U.S.A", "Argentina", "Brazil", "Mexico", "Austria", "Belgium", "Denmark", "Finland", "France", "Germany",
    "Greece", "Ireland", "Italy", "Netherlands", "Norway", "Portugal", "Spain", "Sweden", "Switzerland", "U.K.",
    "Czech Rep.", "Hungary", "Kazakhstan", "Poland", "Russian Fed", "Ukraine", "Egypt", "Kenya", "Mauritius",
    "Nigeria", "South Africa", "Sudan", "Tanzania", "Bahrain", "Iraq", "Israel", "Oman", "Saudi Arabia", "Turkey",
    "U.A.E.", "Yemen Arab Rep.", "Afghanistan", "Bangladesh", "Bhutan", "Iran", "Maldives", "Nepal", "Pakistan",
    "Sri Lanka", "Indonesia", "Malaysia", "Myanmar", "Philippines", "Singapore", "Thailand", "Vietnam", "China",
    "Japan", "Rep. of Korea", "Taiwan", "Australia", "New Zealand"
]

df1.info()

df1.describe()

df1=imputer.fit_transform(df1)
df1=pd.DataFrame(df1)
df1

for x in col_to_impute:
  imputer = KNNImputer(n_neighbors=3)

df1.isna().sum().sum()

"""So Now Dataset Is Filled and Do not contain any missing values and null values.

But it does not have description of column due to knn imputation for that we will make list containing country names and year
"""

df1.column=col_to_impute

df1

dic={}
for i in range(63):
  dic[i]=col_to_impute[i]

df1.rename(columns=dic, inplace=True)

df1.head()

df1["Year"]=new_col

Type = [
   "YEARLY WISE VISITORS",
"YEARLY WISE VISITORS",
"YEARLY WISE VISITORS",
"YEARLY WISE VISITORS",
"YEARLY WISE VISITORS",
"YEARLY WISE VISITORS",
"YEARLY WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AGE GROUP",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE AIRPORT",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE GENDER",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",
"COUNTRY WISE VISITOR WAYS",

]

df1["Type"]=Type

df1

transpose_df['index']=index[:182]

transpose_df.set_index('index')

df1.set_index(['Type','Year'])

df1.isna().sum().sum()

"""So Now we will predict the the number of people visiting india in the next quarter"""

quarter = ["QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS",
"QUARTER WISE VISITORS"]

df1 = df1.set_index(quarter)

df1.index

import pandas as pd
import numpy as np
from sklearn import datasets

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import matplotlib
# %matplotlib inline

matplotlib.rcParams['font.size'] = 10
matplotlib.rcParams['figure.dpi'] = 100

from IPython.core.pylabtools import figsize

df1.columns

plt.figure(figsize=(20,10))
plt.bar(df1['Country'],df1['2020'],label='2020',color='red')
#vertical rotate x axis name
plt.xticks(rotation=90);
plt.xlabel('Country', fontsize=15)
plt.ylabel('Visitors Count',fontsize=15)
plt.title("Country vs yearly visitors :2020",fontsize=20)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score


X = df1[[ "Canada", "U.S.A", "Argentina", "Brazil", "Mexico", "Austria", "Belgium", "Denmark", "Finland", "France", "Germany",
    "Greece", "Ireland", "Italy", "Netherlands", "Norway", "Portugal", "Spain", "Sweden", "Switzerland", "U.K.",
    "Czech Rep.", "Hungary", "Kazakhstan", "Poland", "Russian Fed", "Ukraine", "Egypt", "Kenya", "Mauritius",
    "Nigeria", "South Africa", "Sudan", "Tanzania", "Bahrain", "Iraq", "Israel", "Oman", "Saudi Arabia", "Turkey",
    "U.A.E.", "Yemen Arab Rep.", "Afghanistan", "Bangladesh", "Bhutan", "Iran", "Maldives", "Nepal", "Pakistan",
    "Sri Lanka", "Indonesia", "Malaysia", "Myanmar", "Philippines", "Singapore", "Thailand", "Vietnam", "China",
    "Japan", "Rep. of Korea", "Taiwan", "Australia", "New Zealand"]]
y = []

X = pd.get_dummies(X)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')

# Now, you can use this model to make predictions for new data
# For example, if you have features for a new observation in a DataFrame 'new_data'
new_data = new_data[['Country', 'Weather', 'Festivals', 'TouristTraffic']]
new_data = pd.get_dummies(new_data)
prediction = model.predict(new_data)

